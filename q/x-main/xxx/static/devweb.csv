Dimensions,Sub-Dimensions,Questions,Description,Options,Scores
Build and Deployment,Build,Do you have a defined and documented build and deployment process?,"A build process defines how source code is compiled, tested, and packaged, while a deployment process outlines how the built software is released into production, including roles, steps, and tools involved. This refers to having a clear, structured, and documented process for both building and deploying software ensures consistency, reduces errors, and improves efficiency.",A) No defined process; builds and deployment are manual or ad hoc.,1
,,,,"B) Some projects have defined processes, but these are undocumented and inconsistent.",2
,,,,C) A documented process exists but lacks adoption in all teams.,3
,,,,"D) All teams follow a consistent, well-documented process.",4
,,,,"E) Processes are optimized, automated, and integrated with advanced tools and monitoring for continuous improvement.",5
,,Are software files and packages digitally signed to verify their authenticity and prevent tampering?,"An artifact is any file, package, or binary generated during the software build and deployment process. Examples of artifacts include compiled binaries (app.jar), Docker images (my-app:v1.0), library packages (numpy.whl), config files (config.yaml), and logs (test-results.xml). Signing artifacts involves attaching a cryptographic signature to software packages or files, ensuring that they have not been tampered with and are verified as genuine.",A) No artifacts are signed.,1
,,,,"B) Some critical artifacts are signed, but verification is inconsistent.",2
,,,,"C) Most artifacts are signed, but verification is inconsistent or manual.",3
,,,,D) All artifacts are signed and verified manually.,4
,,,,"E) All artifacts are signed, and verification is automated as part of the CI/CD process.",5
,Deployment,"Do you deploy software updates gradually in controlled phases, such as rolling updates?","Rolling updates involve deploying new versions of software incrementally across servers or systems, reducing the risk of downtime or service disruption. In a rolling update, the new version is first deployed to a small set of servers (e.g., 10%), while the system monitors for issues. If everything runs smoothly, the update is gradually applied to the next batch, repeating the process until all servers are updated without downtime. It’s commonly used in cloud deployments and Kubernetes to ensure smooth and reliable updates.
Canary deployment: A small percentage of users get the new update first, and if stable, it's gradually rolled out to everyone.
Blue/Green deployment: Two environments run in parallel—traffic shifts to the new version once tested, and can revert if issues arise.","A) Deployments result in downtime, with no strategy to minimize it.",1
,,,,B) Rolling updates are occasionally used but not consistently.,2
,,,,"C) Most updates are gradual, but they lack automation or monitoring.",3
,,,,"D) Rolling updates are consistently implemented, automated, and monitored for critical systems.",4
,,,,"E) Rolling updates are automated, monitored, and integrated with advanced traffic-shifting strategies like canary or blue/green deployments.",5
,,"Is the same software version, built once, consistently used across all environments (testing, staging, production) to prevent inconsistencies and ensure reliable deployments?","This refers to ensuring that the same software version, built once, is used across all environments like testing, staging, and production. This prevents inconsistencies and ensures that what is tested is exactly what goes live. An artifact is any file, package, or binary generated during the software build and deployment process. Examples of artifacts include compiled binaries (app.jar), Docker images (my-app:v1.0), library packages (numpy.whl), config files (config.yaml), and logs (test-results.xml).","A) Artifacts are rebuilt separately for each environment, leading to inconsistencies.",1
,,,,"B) Some artifacts are reused, but different environments still get separate builds.",2
,,,,C) Artifacts are built once but inconsistently deployed across environments.,3
,,,,D) A single build is created and reliably used across all environments.,4
,,,,"E) A single build is created, signed, and strictly monitored for consistency across environments.",5
,Patch Management,"Are software components, including applications and system libraries, regularly updated and monitored for security?","Patch management is the process of regularly updating software to fix security issues, improve stability, and keep systems safe from cyber threats.

When software isn’t updated, it can have bugs or vulnerabilities that hackers can exploit. Regular patching ensures that all components—like applications, system libraries, and dependencies—stay secure and up to date.",A) No structured patching; updates are applied manually and inconsistently across components.,1
,,,,"B) A patching policy exists, but updates are inconsistent and rely on manual intervention.",2
,,,,"C) A structured patching policy is followed, with automated updates for most components, but manual validation is required.",3
,,,,"D) Automated patching and monitoring are enforced across all artifacts, with minimal manual intervention.",4
,,,,"E) A fully automated and integrated patching system applies real-time updates, with continuous monitoring and security enforcement.",5
Culture and Organization,Design,Do you assess potential security risks for each feature during sprint planning to prevent vulnerabilities early?," Threat modeling is the process of identifying and addressing security risks before coding even begins. Doing this during sprint planning ensures that security is considered early, not just after development. Sprint-level threat modeling ensures that security risks are proactively addressed during planning for individual technical features. Advanced threat modeling involves a deep analysis of business and technical processes to anticipate potential threats and design appropriate safeguards.",A) No threat modeling is conducted.,1
,,,,"B) Threat modeling is occasionally conducted but is inconsistent, undocumented, and not part of sprint planning.",2
,,,,C) Threat modeling is conducted for major technical features during sprint planning but lacks broader adoption or structure.,3
,,,,D) Threat modeling is conducted consistently for all technical features during sprint planning with defined processes.,4
,,,,"E) Comprehensive threat modeling is conducted consistently during sprint planning, identifying risks and guiding security improvements, proactively  leveraging automation and expert validation for proactive risk mitigation.",5
,,Do you create abuse stories along with user stories to anticipate how attackers might misuse a feature and address security risks early in development?,"When developing software, teams write user stories to describe how people will use a feature. Abuse stories do the opposite—they describe how an attacker might try to misuse the feature. Abuse stories describe potential misuse scenarios of the application, created during development to proactively identify and mitigate security risks.",A) No abuse stories are created during the development process.,1
,,,,B) Abuse stories are occasionally created but lack proper alignment with user stories.,2
,,,,C) Abuse stories are created alongside user stories for critical components but are not applied consistently.,3
,,,,"D) Abuse stories are created consistently for all user stories, ensuring security concerns are addressed systematically.",4
,,,,"E) Abuse stories are an integral part of the development process and include comprehensive security considerations, validated by security specialists.",5
,Education and Guidance,How often do software developers receive security training to address emerging threats and vulnerabilities?,"This refers to impromptu or ad-hoc training sessions that help developers stay updated on security risks, best practices, and incident responses. These trainings ensure teams can quickly adapt to new security challenges and prevent vulnerabilities in their code.",A) No on-demand security training is provided.,1
,,,,"B) Security training happens only in response to major incidents, not proactively.",2
,,,,"C) Some ad-hoc trainings take place, but they are inconsistent and lack structure.",3
,,,,D) Regular ad-hoc trainings are conducted to address emerging threats and vulnerabilities.,4
,,,,"E) Comprehensive, on-demand security trainings are consistently provided and tailored to developer needs and evolving risks.",5
,,Can your development teams easily get help from security experts??,"Security consultants play a key role in helping developers address security concerns during software development. Their availability and responsiveness can make a big difference in preventing vulnerabilities. Accessibility of security consultants refers to their availability to provide expertise, guidance, or reviews when developers face security-related questions.",A) Security consultants are not available for the development teams.,1
,,,,B) Security consultants are occasionally accessible but not in a structured or timely manner.,2
,,,,C) Security consultants are accessible for most development teams but may lack immediate availability.,3
,,,,D) Security consultants are consistently accessible and provide timely guidance to development teams.,4
,,,,"E) Security consultants are integrated into development workflows, providing proactive and immediate support for all teams.",5
,,How often do developers and system administrators work together on security checks?,Collaborative security checks involve developers and system administrators working as a team to find and fix security weaknesses before they become problems. This involves organizing joint reviews or workshops between developers and system administrators to identify and resolve security gaps collectively.,A) Collaborative security checks are not conducted.,1
,,,,B) Collaborative security checks are rarely conducted and lack formal processes.,2
,,,,"C) Collaborative security checks are occasionally conducted, focusing on critical areas but lacking regular frequency.",3
,,,,"D) Collaborative security checks are regularly conducted with defined processes, engaging both developers and system administrators effectively.",4
,,,,"E) Collaborative security checks are conducted systematically and include advanced practices, fostering a culture of shared security responsibility.",5
,Process,"Do you have clear, well-documented plans to keep the business running during disruptions?","Business Continuity and Disaster Recovery (BCDR) refers to having plans and procedures in place to keep operations running and recover quickly in case of disasters like cyberattacks, system failures, or natural disasters. This means having comprehensive plans and procedures documented to ensure the continuity of business operations and recovery in case of disruptions or disasters.",A) No BCDR practices are defined or documented.,1
,,,,B) Basic BCDR practices exist but lack documentation or consistency across the organization.,2
,,,,C) BCDR practices are defined and documented but lack comprehensive testing and periodic updates.,3
,,,,D) Well-defined and documented BCDR practices are consistently updated and periodically tested.,4
,,,,"E) Comprehensive BCDR practices are fully integrated into operations, regularly updated, tested, and optimized for rapid recovery.",5
,,How thoroughly are new versions of source code or infrastructure components reviewed for security measures?,"Every time new code is written or infrastructure components (like servers, databases, or cloud configurations) are updated, they must be reviewed for security to prevent vulnerabilities. This involves assessing all updates or new implementations in code or infrastructure to ensure compliance with security standards and to identify vulnerabilities.",A) No security reviews are conducted for new versions.,1
,,,,B) Security reviews are sporadic and conducted for critical components only.,2
,,,,C) Security reviews are conducted for most new versions but lack consistency in thoroughness and scope.,3
,,,,"D) Security reviews are systematically conducted for all new versions, covering key security measures.",4
,,,,"E) Security reviews are comprehensive, automated where possible, and integrated into the CI/CD pipeline for every update.",5
,,"Do you have a clear process to track, review, and safely implement system changes?","A change management process ensures that any updates to software, infrastructure, or systems are carefully planned, reviewed, and documented to prevent issues like security risks, system failures, or data loss. ",A) Change management processes are not defined or documented.,1
,,,,B) Basic change management processes exist but are not consistently followed.,2
,,,,C) Change management processes are well-defined but lack complete adoption across the organization.,3
,,,,"D) Change management processes are thoroughly implemented, with clear documentation and organization-wide adherence.",4
,,,,E) Change management processes are fully integrated with advanced monitoring and rollback mechanisms for seamless operations.,5
Implementation,Application Hardening,"Does your organization follow secure coding practices to prevent security vulnerabilities like injection attacks, weak authentication, and data exposure?","Secure coding practices ensure that applications are built with security in mind, preventing common vulnerabilities like contextualized encoding ensures that user inputs are encoded appropriately for their intended context (e.g., HTML, JavaScript, SQL), preventing injection attacks.","A) No secure coding practices are followed, leaving the application vulnerable to attacks.",1
,,,,"B) Some security measures are implemented, but there is no consistent approach across the codebase.",2
,,,,C) Secure coding practices are applied to critical parts of the application but not for all possible injection points.,3
,,,,"D) Secure coding practices are systematically followed, reducing risks like injection attacks and weak authentication.",4
,,,,"E) Secure coding is fully automated and integrated into the development lifecyclen like automation of comprehensive contextualized encoding, ensuring secure input handling throughout the application lifecycle.",5
,,Do you apply security best practices to protect your systems and applications from attacks before deployment?,"System and application hardening refers to applying security best practices at the OS, infrastructure, and network levels to reduce the attack surface before deployment, as well as following frameworks like OWASP ASVS to enhance application security. OWASP ASVS (Application Security Verification Standard) is a framework that defines security requirements for web applications, helping organizations build, test, and verify secure software.",A) No baseline security practices or application hardening measures are applied.,1
,,,,B) Basic security hardening practices are followed but not consistently aligned with frameworks like OWASP ASVS.,2
,,,,C) OWASP ASVS practices are followed for most application components but not integrated into the full lifecycle.,3
,,,,D) OWASP ASVS is systematically applied to most components with strong integration into development processes.,4
,,,,"E) OWASP ASVS is fully integrated into the development lifecycle, with automated testing and continuous improvements based on feedback.",5
,Development and Source Control,Are versioning practices implemented to track software builds and prevent untracked deployments?,"Versioning ensures every build or deployment artifact is assigned a unique version, enabling traceability and preventing the use of untracked or outdated artifacts.",A) No versioning practices are implemented.,1
,,,,B) Versioning practices are inconsistently applied or tracked manually.,2
,,,,"C) Versioning is implemented for some components, but not across the entire system.",3
,,,,"D) Versioning is applied consistently across all components, ensuring full traceability of artifacts.",4
,,,,"E) Versioning practices are fully automated, with traceability integrated into the deployment pipeline and artifact management systems.",5
,,"Do you enforce security measures like pull requests, blocked force pushes, and status checks on code branches?","Branch protection ensures code integrity by requiring pull requests (PRs) for changes, blocking force pushes, and enforcing status checks before merging to prevent unauthorized or accidental modifications.",A) No branch protection measures are in place.,1
,,,,"B) Basic branch protection is implemented, but enforcement is not consistent.",2
,,,,"C) Branch protection measures, such as PRs and status checks, are implemented for some branches.",3
,,,,"D) Branch protection measures, including PRs, force push blocks, and status checks, are consistently enforced for all branches.",4
,,,,"E) Branch protection measures are highly automated, ensuring strict enforcement across all projects and developers.",5
,,Do you use tools like .gitignore and static analysis to improve code quality and security?,"Tools like .gitignore prevent the inclusion of unnecessary files in repositories, while static analysis tools scan code to detect vulnerabilities or quality issues.",A) No static analysis or .gitignore tools are used.,1
,,,,"B) Some basic static analysis is done manually, but not fully integrated with version control.",2
,,,,"C) .gitignore is used, and static analysis tools are integrated into some parts of the development workflow.",3
,,,,"D) .gitignore and static analysis tools are integrated across all components, improving code quality and security.",4
,,,,"E) Static analysis and .gitignore tools are fully automated and continuously integrated, preventing security and quality issues in code.",5
,Infrastructure Hardening,"Are builds, and tests isolated in virtualized environments to prevent security risks between services?","Isolating applications in virtualized environments (such as containers, VMs or sandboxes) prevents vulnerabilities in one service from affecting others. Similarly, performing builds and tests in controlled, independent environments (e.g., virtual machines or containers) ensures security and reliability by preventing interference from shared resources.","A)No isolation exists; all workloads, builds, and tests run in shared environments.",1
,,,,"B) Some workloads, builds, and tests are isolated, but many still share environments.",2
,,,,"C) Most workloads, builds, and tests are isolated in virtualized environments.",3
,,,,"D) All workloads, builds, and tests are consistently isolated in virtualized environments to prevent cross-service vulnerabilities.",4
,,,,"E) Workloads, builds, and tests run in secure, temporary environments with strict network rules and least-privilege access. ",5
Information Gathering,Logging,Is centralized system logging implemented to prevent unauthorized manipulation and corruption?,"Centralized logging ensures that logs are aggregated in secure systems, reducing the risk of tampering or loss and facilitating easier analysis.",A) No centralized logging is implemented.,1
,,,,"B) Some systems have centralized logging, but it is incomplete.",2
,,,,C) Centralized logging is implemented for most critical systems.,3
,,,,D) Centralized logging is consistently implemented across all systems.,4
,,,,E) Centralized logging with advanced features like tamper-proof mechanisms and access controls is fully operational.,5
,,"Are security-relevant events logged (e.g., login attempts, user management, input validation)?",Logging security-critical events like authentication attempts or changes in user permissions helps detect and respond to malicious activities.,A) No security-relevant events are logged.,1
,,,,B) Limited logging of security events is performed.,2
,,,,C) Security-relevant events are logged for most systems.,3
,,,,D) All security-relevant events are consistently logged and monitored.,4
,,,,"E) Logs are enriched with context, monitored in real-time, and integrated with incident response processes.",5
,Monitoring,"Do you monitor system metrics like CPU, memory, and disk usage to track performance and detect issues?","Monitoring system metrics ensures optimal performance by tracking resource usage, identifying bottlenecks, and preventing system failures due to overload. A bottleneck is a point in a system where limited resources slow down performance—for example, high CPU usage causing slow processing, or low memory leading to crashes.",A) No system metrics are monitored.,1
,,,,"B) Some metrics are monitored, but coverage is inconsistent.",2
,,,,C) Most critical metrics are monitored for key systems.,3
,,,,D) Comprehensive monitoring of system metrics is implemented.,4
,,,,E) Metrics are monitored with advanced analytics and integrated with automated incident responses.,5
,,"Are alerts triggered when system metrics exceed thresholds, notifying the right stakeholders?","Incident management involves setting thresholds for metrics like CPU usage or latency, automatically triggering alerts when exceeded, and notifying stakeholders for quick action.",A) No incident triggers or alerts are set.,1
,,,,B) Basic threshold-based alerts are set for some metrics.,2
,,,,C) Threshold-based alerts are consistently configured for most metrics.,3
,,,,D) Alerts are well-configured and integrated with incident management workflows.,4
,,,,"E) Automated, dynamic thresholding with advanced alerts and incident response processes is implemented.",5
,Test KPI,"Are vulnerabilities tracked and  prioritized for remediation by severity and communicated to relevant teams using security scans, penetration testing, audits, and incident reports?","Vulnerability tracking involves classifying issues based on severity, such as critical or low risk, and regularly communicating updates to relevant teams. Prioritizing vulnerabilities ensures that the most critical and exploitable issues are addressed first, reducing the risk to the system.","A) Vulnerabilities are neither tracked, prioritized, nor communicated.",1
,,,,"B) Some vulnerabilities are tracked, but prioritization is ad hoc, and communication is inconsistent.",2
,,,,"C) Most vulnerabilities are tracked, and severity is prioritized during quarterly communications.",3
,,,,"D) Comprehensive tracking, prioritization, and communication occur consistently, ensuring vulnerabilities are remediated based on severity.",4
,,,,"E) Vulnerabilities are dynamically tracked, prioritized using advanced frameworks, and communicated in real-time for optimal remediation.",5
Test and Verification,Application Tests,Are critical security features tested with unit and smoke tests to ensure functionality and security after deployment?,"Security-focused unit tests ensure that critical features like login and access control function correctly and remain protected from vulnerabilities. Smoke tests, as an initial check after deployment, verify that core functionalities work as expected, helping catch major issues before deeper testing begins.",A) No unit or smoke tests are conducted.,1
,,,,"B) Some unit tests and smoke tests exist, but they are inconsistent or limited in scope.",2
,,,,"C) Most security-critical features have unit test coverage, and smoke tests are performed after deployments.",3
,,,,"D) Comprehensive unit and smoke tests are implemented, ensuring security and functionality in all deployments. ",4
,,,,E) Advanced automated unit and smoke tests continuously validate security and functionality after every deployment.,5
,Consolidation,"Are vulnerabilities tracked across different layers (e.g., application, infrastructure) and communicated?",Tracking vulnerabilities at various system layers helps ensure comprehensive coverage and enables effective communication across development and operations teams for timely remediation..,A) Vulnerabilities are not tracked or communicated across layers.,1
,,,,B) Tracking is minimal and communication is irregular or incomplete.,2
,,,,C) Vulnerabilities are tracked across most layers and communicated to relevant stakeholders.,3
,,,,"D) Vulnerabilities are consistently tracked across all layers, with clear and timely communication to relevant teams.",4
,,,,E) Advanced tracking and communication processes ensure seamless coordination across layers for vulnerability management.,5
,Dynamic Depth for Applications,Do vulnerability scans comprehensively cover client-side dynamic components and multiple user roles?,"Comprehensive vulnerability scans should identify security risks in client-side components (e.g., JavaScript execution) and ensure that all user roles are authenticated and tested to prevent access control issues.",A)  No vulnerability scans are conducted for client-side components or multiple roles. ,1
,,,,"B) Scans are conducted occasionally, but coverage of client-side components and role-based authentication is inconsistent.",2
,,,,"C) Most client-side components and roles are tested, but some gaps remain in coverage or thoroughness. ",3
,,,,"D) Comprehensive scans are regularly performed, covering all client-side components and user roles.",4
,,,,"E) Advanced automated scans ensure full coverage of client-side components and role-based testing, including rare edge cases.",5
,Dynamic Depth for Infrastructure,Are network configurations tested to identify unintentionally exposed services?,"Regular network configuration testing ensures that services not meant to be publicly accessible are identified and secured, reducing potential attack surfaces.",A) No network configuration tests are conducted.,1
,,,,B) Network configurations are tested infrequently or inconsistently.,2
,,,,"C) Network configurations are tested regularly, but some exposure risks may remain undetected.",3
,,,,D) Comprehensive network configuration tests are conducted regularly to identify and remediate exposed services.,4
,,,,E) Advanced tools and automation are used to ensure continuous testing and proactive detection of exposed services.,5
,,Are cloud environments tested for configuration hardening?,"Cloud configuration hardening tests ensure security best practices like restricted access, encryption, least privilege permissions, and monitoring are in place. They help identify misconfigurations, prevent unauthorized access, and secure cloud services by detecting and fixing vulnerabilities before they can be exploited.",A) No testing for configuration hardening is conducted in cloud environments.,1
,,,,B) Basic configuration hardening tests are conducted but lack depth or regularity.,2
,,,,"C) Cloud configurations are tested regularly, but some critical aspects may be overlooked.",3
,,,,D) Comprehensive tests ensure cloud configurations meet hardening standards.,4
,,,,E) Continuous automated testing with advanced tools ensures optimal cloud hardening practices.,5
,Static Depth for Applications,Are static analysis tools used effectively for both source code and infrastructure vulnerabilities?,"Static analysis tools automate security checks by scanning source code for issues like hardcoded secrets, insecure functions, and potential injection points. Also, static analysis tools assess configuration files and scripts for security gaps, ensuring infrastructure components are secure and compliant with standards.",A) No static analysis tools are used for source code or infrastructure.,1
,,,,"B) Static analysis tools are used occasionally, but coverage is incomplete for both source code and infrastructure.",2
,,,,"C) Static analysis tools are used for the majority of codebase, but some key areas in either source code or infrastructure are missed.",3
,,,,D) Comprehensive static analysis is conducted regularly across the full codebase and infrastructure components.,4
,,,,E) Static analysis is fully automated and continuously integrated into the development pipeline across both source code and infrastructure. ,5
,, Are stylistic rules and best practices enforced in the codebase?,"Stylistic rules define how code should be formatted and structured. Enforcing stylistic rules promotes consistent coding practices, improving code readability, maintainability, and early detection of potential issues.",A) No stylistic rules are enforced.,1
,,,,B) Style guides are partially followed with limited enforcement.,2
,,,,C) Style guides are followed and checked manually during reviews.,3
,,,,D) Automated stylistic analysis tools enforce compliance.,4
,,,,E) Comprehensive style compliance checks are fully automated and integrated into workflows.,5
,Static Depth for Infrastructure,"Are unused resources, such as secrets, identified and removed from infrastructure?",Identifying and removing unused resources prevents potential security risks from orphaned secrets or inactive infrastructure elements.,A) Unused resources are not identified or removed.,1
,,,,"B) Some unused resources are identified, but not consistently.",2
,,,,"C) Unused resources, including secrets, are regularly identified and removed from infrastructure.",3
,,,,"D) Tools are used to automatically identify and remove unused resources, including secrets, from infrastructure.",4
,,,,"E) Unused resources are proactively managed, with continuous monitoring and removal of outdated or unneeded resources.",5
,Test-Intensity,Are security tests designed to catch vulnerabilities effectively without slowing down development?,"Optimizing tests means finding the right balance between thoroughly checking for security issues and keeping the testing process quick. If too few tests are run, important security flaws might be missed, making the system vulnerable. On the other hand, if too many tests are run, it can slow down development, delaying updates and making the process inefficient. The goal is to run enough tests to catch serious issues without wasting time on unnecessary checks, ensuring both security and speed.","A) Testing lacks structure, leading to incomplete checks or excessive delays.",1
,,,,"B) Some effort is made to balance testing depth and speed, but it's not fully optimized.",2
,,,,C) Test intensity and confidence thresholds are set but might not be consistent across all tests.,3
,,,,D) Test intensity and confidence thresholds are well-defined and optimized for most tests.,4
,,,,"E) Test intensity and confidence thresholds are continuously optimized, ensuring the balance between test depth and time across all tests.",5
,,Are regular automated security tests performed?,"Regular automated tests ensure consistent, ongoing identification of vulnerabilities, keeping systems secure without relying solely on manual reviews.",A) No automated security tests are performed.,1
,,,,"B) Some automated security tests are performed, but they are irregular or incomplete.",2
,,,,"C) Regular automated security tests are performed, but coverage is inconsistent.",3
,,,,D) Automated security tests are regularly performed with good coverage across key components.,4
,,,,"E) A fully automated security testing process is integrated into the CI/CD pipeline, with regular and comprehensive testing coverage.",5
